/**
 * radical-widget.js
 * Created by Nathan Skipper, MTI
 * Created on 2/7/2017
 * Revision 0.1
 * @copyright (c) 2017, Nathan Skipper
 * License: Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 * 
 * Description: This file contains classes related to the "widget" functionality within
 * Radical. A widget is a graphical object which will be represented within both the Designer
 * and the Application.
 */

function GetWidgetDependency(url){
    var retval = null;
    try{
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("GET", url, false);
        xmlhttp.send();
        if(xmlhttp.readyState == 4){
            if(xmlhttp.status == 200){
                retval = xmlhttp.responseText;
            }
        }

    }
    catch(e){
        console.log(e);
    }
    return retval;
}

/**
 * Constructs a new RadicalWidget object with the given instance ID and widget definition.
 * @param {string} id The instance id for this object. The instance ID is a unique identifier or name given to an instance of the widget.
 * @param {string} widgetDef The JSON definition of the widget. This is an optional parameter, which if provided will be passed to the "InitWidget" function.
 * @return {RadicalWidget} Returns an instantiated RadicalWidget object.
 */
function RadicalWidget(id, widgetDef){
    this.InstanceID = id;
    if(typeof widgetDef !== "undefined"){
        this.InitWidget(widgetDef);
    }
}

/**
 * The RadicalWidget prototype definition.
 */
RadicalWidget.prototype = {
    
    /**
     * Classes defines an array of classes used by this widget in the GUI.
     */
    Classes: [],
    /**
     * Children defines child instances under this widget instance.
     */
    Children: [],
    /**
     * The name of this widget.
     */
    Name: "",
    /**
     * A set of properties defined by the widget.
     */
    Properties: {},
    /**
     * The primitive DOM object used to represent this widget. This property is generated by the OnWidgetLoad function as defined by the widget designer.
     */
    Primitive: null,
    /**
     * The DOM object to which this widget belongs. This widget can be considered to be "under" the context object.
     */
    Context: null,
    /**
     * OnInstanceClick is a placeholder for an event handler for click events on this widget instance. This event can be defined in the scripting of the document.
     * When the Load function is called for this widget, the widget will automatically assign a function in the document that is named by the instance ID followed
     * by "_OnInstanceClick" to this function. For example, if the instance ID is "Button1", then the event in the script should be "Button1_OnInstanceClick"
     * @param {object} widget The widget on which this event occurred.
     * @param {Element} context The DOM element which contains this widget.
     * @param {MouseEvent} event The mouse event from the onclick event.
     */
    OnInstanceClick: function(widget, context, event){console.log('RadicalWidget.OnClick');},
    /**
     * An event handler for the onchange event for an instance of a widget. This event is assigned by the Load function if there exists a function in
     * the DOM by the name of the instance ID and "_OnInstanceChange"
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {Event} event The event from onchange.
     */
    OnInstanceChange: function(widget, context, event){console.log('RadicalWidget.OnChange');},
    /**
     * An event handler for the onmousemove event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseMove.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmousemove event.
     */
    OnInstanceMouseMove: function(widget, context, event){console.log('RadicalWidget.OnMouseMove');},
    /**
     * An event handler for the onmouseenter event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseEnter.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseenter event.
     */
    OnInstanceMouseEnter: function(widget, context, event){console.log('RadicalWidget.OnMouseEnter');},
    /**
     * An event handler for the onmouseleave event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseLeave.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseleave event.
     */
    OnInstanceMouseLeave: function(widget, context, event){console.log('RadicalWidget.OnMouseLeave');},
    /**
     * An event handler for the onmousedown event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseDown.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmousedown event.
     */
    OnInstanceMouseDown: function(widget, context, event){console.log('RadicalWidget.OnMouseDown');},
    /**
     * An event handler for the onmouseup event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseUp.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseup event.
     */
    OnInstanceMouseUp: function(widget, context, event){console.log('RadicalWidget.OnMouseUp');},
    /**
     * An event handler for the onmouseleave event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseLeave.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseleave event.
     */
    OnInstanceAddChild: function(widget, context, child){},
    OnInstanceRemoveChild: function(widget, context, child){},
    OnWidgetPropertyChange: "function(widget, context, property){}",
    OnWidgetLoad: "function(widget, context){}",
    OnWidgetSetEnabled: "function(widget, context, enable){}",
    OnWidgetGetEnabled: "function(widget, context){}",
    OnWidgetSetVisible: "function(widget, context, visible){}",
    OnWidgetGetVisible: "function(widget, context){}",
    OnWidgetGetValue: "function(widget, context){}",
    OnWidgetSetValue: "function(widget, context, value){}",
    SetProperty: function(name, value){
        var retval = false;
        try{
            if(typeof Properties === "Array"){
                if(typeof Properties[name] !== "undefined"){
                    Properties[name] = value;
                    var func = window[this.InstanceID + "_WidgetEvents.OnWidgetPropertyChange"];
                    if(typeof func === "function"){
                        func(this, this.Context, name);
                        retval = true;
                    }
                }
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    GetProperty: function(name){
        var retval = null;
        try{
            if(typeof this.Properties[name] !== "undefined"){
                retval = this.Properties[name];
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    InitWidget: function(jsonString){
        var retval = false;
        try{
            var widget = JSON.parse(jsonString);
            if(widget.Classes){
                this.Classes = widget.Classes;
            }
            if(widget.Properties){
                this.Properties = widget.Properties;
            }
            if(widget.OnWidgetGetEnabled){
                this.OnWidgetGetEnabled = widget.OnWidgetGetEnabled;
            }
            if(widget.OnWidgetGetValue){
                this.OnWidgetGetValue = widget.OnWidgetGetValue;
            }
            if(widget.OnWidgetGetVisible){
                this.OnWidgetGetVisible = widget.OnWidgetGetVisible;
            }
            if(widget.OnWidgetLoad){
                this.OnWidgetLoad = widget.OnWidgetLoad;
            }
            if(widget.OnWidgetPropertyChange){
                this.OnWidgetPropertyChange = widget.OnWidgetPropertyChange;
            }
            if(widget.OnWidgetSetEnabled){
                this.OnWidgetSetEnabled = widget.OnWidgetSetEnabled;
            }
            if(widget.OnWidgetSetValue){
                this.OnWidgetSetValue = widget.OnWidgetSetValue;
            }
            if(widget.OnWidgetSetVisible){
                this.OnWidgetSetVisible = widget.OnWidgetSetVisible;
            }
            if(widget.Name){
                this.Name = widget.Name;
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    Load: function(context){
        var retval = true;
        try{
            this.Context = context;
            var widgetScript = document.getElementById(this.InstanceID + "_WidgetEvents");
            var widgetDec = document.getElementById("WidgetDeclarations");
            
            var head = document.getElementsByTagName("head")[0];
            
            if(!widgetDec){
                widgetDec = document.createElement("script");
                widgetDec.id = "WidgetDeclarations";
                head.appendChild(widgetDec);
                if(widgetDec.innerText.indexOf(this.InstanceID + "_WidgetEvents") == -1){
                    widgetDec.innerText += "var " + this.InstanceID + "_WidgetEvents = {};\n";
                    
                }
            }
            var widgetEvents = window[this.InstanceID + "_WidgetEvents"];
            widgetEvents.WidgetInstance = this;
            
            var cevent = window[this.InstanceID + "_OnInstanceClick"];
            if(typeof cevent === "function"){
                this.OnInstanceClick = cevent;

            }
            cevent = window[this.InstanceID + "_OnInstanceChange"];
            if(typeof cevent === "function"){
                this.OnInstanceChange = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseMove"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseMove= cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseEnter"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseEnter = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseLeave"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseLeave = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseDown"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseDown = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseUp"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseUp = cevent;
            }

            if(widgetScript == null){
                widgetScript = document.createElement("script");
                widgetScript.id = this.InstanceID + "_WidgetEvents";
            }

            widgetScript.innerText = this.InstanceID + "_WidgetEvents.OnWidgetLoad = " + this.OnWidgetLoad + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetSetEnabled = " + this.OnWidgetSetEnabled + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetGetEnabled = " + this.OnWidgetGetEnabled + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetSetVisible = " + this.OnWidgetSetVisible + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetGetVisible = " + this.OnWidgetGetVisible + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetSetValue = " + this.OnWidgetSetValue + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetGetValue = " + this.OnWidgetGetValue + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetPropertyChange = " + this.OnWidgetPropertyChange + ";\n";
            
            head.appendChild(widgetScript);
            eval(this.InstanceID + "_WidgetEvents.OnWidgetLoad(" + this.InstanceID + "_WidgetEvents.WidgetInstance, " + this.InstanceID + "_WidgetEvents.WidgetInstance.Context);");
            if(this.Primitive){
                var context = this.Context;
                var widget = this;
                this.Primitive.onclick = function(event){
                    if(typeof widget.OnInstanceClick === "function"){
                        widget.OnInstanceClick(widget, context, event);
                    }
                };
                this.Primitive.onmousemove = function(event){
                    if(typeof widget.OnInstanceMouseMove === "function"){
                        widget.OnInstanceMouseMove(widget, context, event);
                    }
                };
                this.Primitive.onmouseenter = function(event){
                    if(typeof widget.OnInstanceMouseEnter === "function"){
                        widget.OnInstanceMouseEnter(widget, context, event);
                    }
                };
                this.Primitive.onmouseleave = function(event){
                    if(typeof widget.OnInstanceMouseLeave === "function"){
                        widget.OnInstanceMouseLeave(widget, context, event);
                    }
                }
                this.Primitive.onchange = function(event){
                    if(typeof widget.OnInstanceChange === "function"){
                        widget.OnInstanceChange(widget, context, event);
                    }
                }
                this.Primitive.onmousedown = function(event){
                    if(typeof widget.OnInstanceMouseDown === "function"){
                        widget.OnInstanceMouseDown(widget, context, event);
                    }
                }
                this.Primitive.onmouseup = function(event){
                    if(typeof widget.OnInstanceMouseUp === "function"){
                        widget.OnInstanceMouseUp(widget, context, event);
                    }
                }
            }
        }
        catch(e){
            console.log(e);
            retval = false;
        }
    },
    SetEnabled: function(enable){
        var retval = false;
        try{
            var func = window[this.InstanceID + "_WidgetEvents.OnWidgetSetEnabled"];
            if(typeof func === "function"){
                retval = func(this, this.Context, enable);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    GetEnabled: function(){
        var retval = false;
        try{
            var func = window[this.InstanceID + "_WidgetEvents.OnWidgetGetEnabled"];
            if(typeof func === "function"){
                retval = func(this, this.Context);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    SetVisible: function(visible){
        var retval = false;
        try{
            var func = window[this.InstanceID + "_WidgetEvents.OnWidgetSetVisible"];
            if(typeof func === "function"){
                retval = func(this, this.Context, visible);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    GetVisible: function(){
        var retval = false;
        try{
            var func = window[this.InstanceID + "_WidgetEvents.OnWidgetGetVisible"];
            if(typeof func === "function"){
                retval = func(this, this.Context);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    GetValue: function(){
        var retval = null;
        try{
            var func = window[this.InstanceID + "_WidgetEvents.OnWidgetGetValue"];
            if(typeof func === "function"){
                retval = func(this, this.Context);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    SetValue: function(val){
        var retval = false;
        try{
            var func = window[this.InstanceID + "_WidgetEvents.OnWidgetSetValue"];
            if(typeof func === "function"){
                retval = func(this, this.Context, val);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    }
}