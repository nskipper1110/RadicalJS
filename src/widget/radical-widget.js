/**
 * radical-widget.js
 * Created by Nathan Skipper, MTI
 * Created on 2/7/2017
 * Revision 0.1
 * @copyright (c) 2017, Nathan Skipper
 * License: Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 * 
 * Description: This file contains classes related to the "widget" functionality within
 * Radical. A widget is a graphical object which will be represented within both the Designer
 * and the Application.
 */

function GetWidgetDependency(url){
    var retval = null;
    try{
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("GET", url, false);
        xmlhttp.send();
        if(xmlhttp.readyState == 4){
            if(xmlhttp.status == 200){
                retval = xmlhttp.responseText;
            }
        }

    }
    catch(e){
        console.log(e);
    }
    return retval;
}

/**
 * Constructs a new RadicalWidget object with the given instance ID and widget definition.
 * @param {string} id The instance id for this object. The instance ID is a unique identifier or name given to an instance of the widget.
 * @param {string} widgetDef The JSON definition of the widget. This is an optional parameter, which if provided will be passed to the "InitWidget" function.
 * @return {RadicalWidget} Returns an instantiated RadicalWidget object.
 */
function RadicalWidget(id, widgetDef){
    this.InstanceID = id;
    if(typeof widgetDef !== "undefined"){
        this.InitWidget(widgetDef);
    }
}

/**
 * The RadicalWidget prototype definition.
 */
RadicalWidget.prototype = {
    
    /**
     * Classes defines an array of classes used by this widget in the GUI.
     */
    Classes: [],
    /**
     * Children defines child instances under this widget instance.
     */
    Children: [],
    /**
     * The name of this widget.
     */
    Name: "[Name]",
    /**
     * The instance Value for this widget. This property represents the value set in the instance, if any. It should be changed
     * using the SetValue and GetValue functions, which validate the value and notify the widget of changes.
     */
    Value: null,
    /**
     * The parent widget instance for this instance. This value is set by the AddChild function.
     */
    Parent: null,
    /**
     * A set of properties defined by the widget.
     */
    Properties: {},
    /**
     * The primitive DOM object used to represent this widget. This property is generated by the OnWidgetLoad function as defined by the widget designer.
     */
    Primitive: null,
    /**
     * The DOM object within this widget which will be generating events. This property should be generated by the OnWidgetLoad function defined by the widget
     * designer. It can be the same as the Primitive property, but it must be set independently.
     */
    EventPrimitive: null,

    /**
     * The DOM object to which this widget belongs. This widget can be considered to be "under" the context object.
     */
    Context: null,
    /**
     * OnInstanceClick is a placeholder for an event handler for click events on this widget instance. This event can be defined in the scripting of the document.
     * When the Load function is called for this widget, the widget will automatically assign a function in the document that is named by the instance ID followed
     * by "_OnInstanceClick" to this function. For example, if the instance ID is "Button1", then the event in the script should be "Button1_OnInstanceClick"
     * @param {object} widget The widget on which this event occurred.
     * @param {Element} context The DOM element which contains this widget.
     * @param {MouseEvent} event The mouse event from the onclick event.
     */
    OnInstanceClick: function(widget, context, event){console.log('RadicalWidget.OnClick');},
    /**
     * An event handler for the onchange event for an instance of a widget. This event is assigned by the Load function if there exists a function in
     * the DOM by the name of the instance ID and "_OnInstanceChange"
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {Event} event The event from onchange.
     */
    OnInstanceChange: function(widget, context, event){console.log('RadicalWidget.OnChange');},
    /**
     * An event handler for the onmousemove event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseMove.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmousemove event.
     */
    OnInstanceMouseMove: function(widget, context, event){console.log('RadicalWidget.OnMouseMove');},
    /**
     * An event handler for the onmouseenter event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseEnter.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseenter event.
     */
    OnInstanceMouseEnter: function(widget, context, event){console.log('RadicalWidget.OnMouseEnter');},
    /**
     * An event handler for the onmouseleave event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseLeave.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseleave event.
     */
    OnInstanceMouseLeave: function(widget, context, event){console.log('RadicalWidget.OnMouseLeave');},
    /**
     * An event handler for the onmousedown event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseDown.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmousedown event.
     */
    OnInstanceMouseDown: function(widget, context, event){console.log('RadicalWidget.OnMouseDown');},
    /**
     * An event handler for the onmouseup event for an instance of a widget. This event is assigned by the Load function based on an available function in
     * the DOM named [Instance ID]_OnInstanceMouseUp.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {context} context The DOM element containing the widget.
     * @param {MouseEvent} event the event passed from the onmouseup event.
     */
    OnInstanceMouseUp: function(widget, context, event){console.log('RadicalWidget.OnMouseUp');},
    /**
     * This is an event handler for the widget which notifies the widget when a new child is added using the
     * "AddChild" function. This should be implemented within the document context, and the Load function will
     * associate any function named with [Name]_OnWidgetAddChild to this function, where [Name] is the Name property of this widget.
     * @param {object} widget The widget instance on which the event occurred.
     * @param {Element} context The DOM element containing the widget.
     * @param {object} child The child widget instance to add.
     * @return {boolean} Should return true if the child can be added, or false if it cannot.
     */
    OnWidgetAddChild: function(widget, context, child){return true;},
    /**
     * This is an event handler for the widget which notifies the widget when a child is removed using the
     * "RemoveChild" function. This function can be overridden by implementing a function within the document
     * context as [Name]_OnWidgetRemoveChild
     * @param {object} widget The widget instance on which the event occurred.
     * @param {Element} context The DOM element containing the widget.
     * @param {object} child The child widget instance to remove.
     * @return {boolean} Should return true if the child can be removed, or false if it cannot.
     */
    OnWidgetRemoveChild: function(widget, context, child){return true;},
    /**
     * This event handler notifies the widget when a property changes so the widget can adjust behaviors.
     * This function can be overridden by implementing a function in the document as [Name]_OnWidgetRemoveChild
     * @param {object} widget The widget instance on which the event occurred.
     * @param {Element} context the DOM element containing the widget.
     * @param {string} property the name of the property that was changed.
     */
    OnWidgetPropertyChange: function(widget, context, property){return true;},
    /**
     * This event is called when the widget instance Load function is called. This event handler should
     * at a minimum instantiate the Primitive and EventPrimitive values and set the DOM id attribute for the primitive.
     * This function can be overridden by implementing [Name]_OnWidgetLoad within the document.
     * @param {object} widget The widget instance on which the Load is occurring.
     * @param {Element} context The DOM element into which this widget instance is being placed.
     */
    OnWidgetLoad: function(widget, context){
        widget.Primitive = document.createElement('div');
        widget.Primitive.id = widget.InstanceID;
        widget.EventPrimitive = widget.Primitive;
        if(typeof context !== 'undefined'){
            context.appendChild(widget.Primitive);
        }
    },
    /**
     * An event handler that will receive notifications of changes to the enabled state of a widget instance. The
     * widget designer should write code which will dictate the behavior of the widget when an instance implementing this instance is enabled or disabled.
     * @param {object} widget The widget instance on which the SetEnable function has been called.
     * @param {Element} context The DOM element in which the widget resides.
     * @param {boolean} enable Indicates whether to enable or disable the widget instance.
     * @returns {boolean} Return true if the widget enable state was changed, or false if not.
     */
    OnWidgetSetEnabled: function(widget, context, enable){return true;},
    /**
     * An event handler that will receive notifications when GetEnabled is called for a widget instance. The
     * widget designer should write code which will indicate when the widget is enabled or disabled.
     * @param {object} widget The widget instance on which the GetEnabled function has been called.
     * @param {Element} context The DOM element in which the widget resides.
     * @return {boolean} Return the enabled state.
     */
    OnWidgetGetEnabled: function(widget, context){return true;},
    /**
     * This is a widget level event handler which allows the widget to set the visible state for its primitive. This event is
     * called from the SetVisible function.
     * @param {object} widget The widget instance on which the SetVisible function was called.
     * @param {Element} context The DOM context in which the widget instance is contained.
     * @param {boolean} visible The boolean value indicating whether the widget instance should be visible or not.
     */
    OnWidgetSetVisible: function(widget, context, visible){},
    /**
     * This is a widget level event handler fired from the "GetVisible" function, which allows the widget to return the
     * visible state of the underlying elements.
     * @param {object} widget The widget instance on which the GetVisible function was called.
     * @param {Element} context The DOM element in which the widget instance is contained.
     * @returns {boolean} Returns true if the widget instance is currently visible, or false otherwise.
     */
    OnWidgetGetVisible: function(widget, context){return true;},
    /**
     * This is a widget level event handler which allows the widget to return the current value for its primitive, represented in 
     * a meaningful format to the caller. This event is called from the "GetValue" function.
     * @param {object} widget The widget instance on which the GetValue function was called.
     * @param {Element} context The DOM element containing the widget instance.
     * @returns {any} Returns the value from the widget instance.
     */
    OnWidgetGetValue: function(widget, context){return null;},
    /**
     * This is a widget level event handler which allows the widget to set the current value for its primitive. This event is called from
     * the "SetValue" function.
     * @param {object} widget The widget instance on which the SetValue function was called.
     * @param {Element} context The DOM context in which the widget instance is contained.
     * 
     */
    OnWidgetSetValue: function(widget, context, value){},
    /**
     * Sets a property for this widget instance.
     * @param {string} name The name of the property to set.
     * @param {any} value The value of the property to set.
     * @returns {boolean} Returns true if the property was successfully set, or false otherwise.
     */
    SetProperty: function(name, value){
        var retval = false;
        try{
            if(typeof this.Properties === "object"){
                if(typeof this.Properties[name] !== "undefined"){
                    this.Properties[name] = value;
                    var func = window[this.Name + "_OnWidgetPropertyChange"];
                    if(typeof func === "function"){
                        func(this, this.Context, name);
                        retval = true;
                    }
                }
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Gets a property for this widget instance.
     * @param {string} name The name of the property to get.
     * @returns {any} Returns the value of the property, or null if there is no property for that name.
     */
    GetProperty: function(name){
        var retval = null;
        try{
            if(typeof this.Properties[name] !== "undefined"){
                retval = this.Properties[name];
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Initializes a widget instance based on the JSON string that defines the widget.
     * @param {string} jsonString The JSON string that represents the widget.
     * @returns {boolean} Returns true if the widget was successfully loaded from the json.
     */
    InitWidget: function(jsonString){
        var retval = false;
        try{
            var widget = JSON.parse(jsonString);
            if(widget.Classes){
                this.Classes = widget.Classes;
            }
            if(widget.Properties){
                this.Properties = widget.Properties;
            }
            
            if(widget.Name){
                this.Name = widget.Name;
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Loads the widget instance into the DOM context. This function sets all events for the instance
     * and calls the widget's load function to generate the element.
     * @param {Element} context 
     */
    Load: function(context){
        var retval = true;
        try{
            this.Context = context;
            /*var widgetScript = document.getElementById(this.InstanceID + "_WidgetEvents");
            var widgetDec = document.getElementById("WidgetDeclarations");
            
            var head = document.getElementsByTagName("head")[0];*/
            
            /*if(!widgetDec){
                widgetDec = document.createElement("script");
                widgetDec.id = "WidgetDeclarations";
                head.appendChild(widgetDec);
                if(widgetDec.innerText.indexOf(this.InstanceID + "_WidgetEvents") == -1){
                    widgetDec.innerText += "var " + this.InstanceID + "_WidgetEvents = {};\n";
                    
                }
            }
            var widgetEvents = window[this.InstanceID + "_WidgetEvents"];
            widgetEvents.WidgetInstance = this;*/
            
            var cevent = window[this.InstanceID + "_OnInstanceClick"];
            if(typeof cevent === "function"){
                this.OnInstanceClick = cevent;

            }
            cevent = window[this.InstanceID + "_OnInstanceChange"];
            if(typeof cevent === "function"){
                this.OnInstanceChange = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseMove"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseMove= cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseEnter"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseEnter = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseLeave"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseLeave = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseDown"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseDown = cevent;
            }
            cevent = window[this.InstanceID + "_OnInstanceMouseUp"];
            if(typeof cevent === "function"){
                this.OnInstanceMouseUp = cevent;
            }
            //widget event assignments
            cevent = window[this.Name + "_OnWidgetLoad"];
            if(typeof cevent === "function"){
                this.OnWidgetLoad = cevent;
            }
            cevent = window[this.Name + "_OnWidgetAddChild"];
            if(typeof cevent === "function"){
                this.OnWidgetAddChild = cevent;
            }
            cevent = window[this.Name + "_OnWidgetGetEnabled"];
            if(typeof cevent === "function"){
                this.OnWidgetGetEnabled = cevent;
            }
            cevent = window[this.Name + "_OnWidgetGetVisible"];
            if(typeof cevent === "function"){
                this.OnWidgetGetVisible = cevent;
            }
            cevent = window[this.Name + "_OnWidgetGetValue"];
            if(typeof cevent === "function"){
                this.OnWidgetGetValue = cevent;
            }
            cevent = window[this.Name + "_OnWidgetPropertyChange"];
            if(typeof cevent === "function"){
                this.OnWidgetPropertyChange = cevent;
            }
            cevent = window[this.Name + "_OnWidgetRemoveChild"];
            if(typeof cevent === "function"){
                this.OnWidgetRemoveChild = cevent;
            }
            cevent = window[this.Name + "_OnWidgetSetEnabled"];
            if(typeof cevent === "function"){
                this.OnWidgetSetEnabled = cevent;
            }
            cevent = window[this.Name + "_OnWidgetSetValue"];
            if(typeof cevent === "function"){
                this.OnWidgetSetValue = cevent;
            }

            /*if(widgetScript == null){
                widgetScript = document.createElement("script");
                widgetScript.id = this.InstanceID + "_WidgetEvents";
            }*/

            /*widgetScript.innerText = this.InstanceID + "_WidgetEvents.OnWidgetLoad = " + this.OnWidgetLoad + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetSetEnabled = " + this.OnWidgetSetEnabled + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetGetEnabled = " + this.OnWidgetGetEnabled + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetSetVisible = " + this.OnWidgetSetVisible + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetGetVisible = " + this.OnWidgetGetVisible + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetSetValue = " + this.OnWidgetSetValue + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetGetValue = " + this.OnWidgetGetValue + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetAddChild = " + this.OnWidgetAddChild + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetRemoveChild = " + this.OnWidgetRemoveChild + ";\n";
            widgetScript.innerText += this.InstanceID + "_WidgetEvents.OnWidgetPropertyChange = " + this.OnWidgetPropertyChange + ";\n";*/
            
            //head.appendChild(widgetScript);
            cevent = window[this.Name + "_OnWidgetLoad"];
            if(typeof cevent === "function"){
                cevent(this, this.Context);
            }
            if(this.EventPrimitive == null){
                this.EventPrimitive = this.Primitive;
            }
            //eval(this.InstanceID + "_WidgetEvents.OnWidgetLoad(" + this.InstanceID + "_WidgetEvents.WidgetInstance, " + this.InstanceID + "_WidgetEvents.WidgetInstance.Context);");
            if(this.EventPrimitive){
                var context = this.Context;
                var widget = this;
                this.EventPrimitive.onclick = function(event){
                    if(typeof widget.OnInstanceClick === "function"){
                        widget.OnInstanceClick(widget, context, event);
                    }
                };
                this.EventPrimitive.onmousemove = function(event){
                    if(typeof widget.OnInstanceMouseMove === "function"){
                        widget.OnInstanceMouseMove(widget, context, event);
                    }
                };
                this.EventPrimitive.onmouseenter = function(event){
                    if(typeof widget.OnInstanceMouseEnter === "function"){
                        widget.OnInstanceMouseEnter(widget, context, event);
                    }
                };
                this.EventPrimitive.onmouseleave = function(event){
                    if(typeof widget.OnInstanceMouseLeave === "function"){
                        widget.OnInstanceMouseLeave(widget, context, event);
                    }
                }
                this.EventPrimitive.onchange = function(event){
                    if(typeof widget.OnInstanceChange === "function"){
                        widget.OnInstanceChange(widget, context, event);
                    }
                }
                this.EventPrimitive.onmousedown = function(event){
                    if(typeof widget.OnInstanceMouseDown === "function"){
                        widget.OnInstanceMouseDown(widget, context, event);
                    }
                }
                this.EventPrimitive.onmouseup = function(event){
                    if(typeof widget.OnInstanceMouseUp === "function"){
                        widget.OnInstanceMouseUp(widget, context, event);
                    }
                }
            }
        }
        catch(e){
            console.log(e);
            retval = false;
        }
    },

    /**
     * Sets a widget instance's enabled behavior.
     * @param {boolean} enable Sets the enabled state.
     * @returns {boolean} Returns true if the enabled state was set.
     */
    SetEnabled: function(enable){
        var retval = false;
        try{
            var func = window[this.Name + "_OnWidgetSetEnabled"];
            if(typeof func === "function"){
                retval = func(this, this.Context, enable);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Returns the enabled state of the current widget instance.
     * @returns {boolean} Returns true if the instance is enabled.
     */
    GetEnabled: function(){
        var retval = false;
        try{
            var func = window[this.Name + "_OnWidgetGetEnabled"];
            if(typeof func === "function"){
                retval = func(this, this.Context);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Sets the visible state of the widget instance.
     * @param {boolean} visible If true, the widget instance is made visible.
     * @returns {boolean} returns true if the instance's visibility was changed.
     */
    SetVisible: function(visible){
        var retval = false;
        try{
            var func = window[this.Name + "_OnWidgetSetVisible"];
            if(typeof func === "function"){
                retval = func(this, this.Context, visible);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Returns the current visibility of the instance.
     * @returns {boolean} returns true if the instance is visible.
     */
    GetVisible: function(){
        var retval = false;
        try{
            var func = window[this.Name + "_OnWidgetGetVisible"];
            if(typeof func === "function"){
                retval = func(this, this.Context);
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Returns the current value set for the instance.
     * @returns {any} Returns the value of the instance.
     */
    GetValue: function(){
        var retval = null;
        try{
            var func = window[this.Name + "_OnWidgetGetValue"];
            if(typeof func === "function"){
                func(this, this.Context);
            }
            retval = Value;
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Sets the value of the instance.
     * @param {any} val The value to set the instance to.
     * @returns {boolean} returns true if the value was successfully set.
     */
    SetValue: function(val){
        var retval = false;
        try{
            var func = window[this.Name + "_OnWidgetSetValue"];
            if(typeof func === "function"){
                retval = func(this, this.Context, val);
                if(retval){
                    Value = val;
                }
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Adds a child to this widget instance and sets the child's "Parent" property to this instance.
     * @param {object} child The child instance to add to this instance.
     * @returns {boolean} returns true if the child was added.
     */
    AddChild: function(child){
        var retval = false;
        try{
            var func = window[this.Name + "_OnWidgetAddChild"];
            if(typeof func === "function"){
                retval = func(this, this.Context, child);
            }
            else{
                retval = true;
            }
            if(retval){
                if(child.InstanceID){
                    if(typeof this.Children === "undefined"){
                        this.Children = [];
                    }
                    else if(this.Children.constructor !== Array){
                        this.Children = [];
                    }
                    this.Children.push(child);
                    child.Parent = this;
                }
            }
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Removes a child from this instance.
     * @param {object} child The child to remove from the instance.
     * @returns {boolean} returns true if the child was removed.
     */
    RemoveChild: function(child){
        var retval = false;
        try{
            var x = this.GetChildIndex(child);
            if(x > -1){
                var func = window[this.Name + "_OnWidgetRemoveChild"];
                if(typeof func === "function"){
                    retval = func(this, this.Context, child);
                }
                else{
                    retval = true;
                }
                if(retval){
                    this.Children[x].Parent = null;
                    this.Children.splice(x, 1);
                }
            }
            
        }
        catch(e){
            console.log(e);
        }
        return retval;
    },
    /**
     * Gets the index within the "Children" array of the child provided.
     * @param {object} child The child to search for.
     * @returns {int} returns -1 if the child could not be found, or the index of the child in the array if found.
     */
    GetChildIndex: function(child){
        var retval = -1;
        try{
            if(typeof child !== "undefined"){
                if(typeof child.InstanceID !== "undefined"){
                    for(var x = 0; x < Children.length; x++){
                        if(this.Children[x].InstanceID === child.InstanceID){
                            retval = x;
                            break;
                        }
                    }
                }
            }
        }
        catch(e){

        }
        return retval;
    },
    /**
     * Exports the current widget as a JSON string.
     * @returns {string} returns the string representation of this widget.
     */
    ExportWidget: function(){
        return JSON.stringify(this);
    }
}

